---
title: "Demostración de la simulación"
filters:
  - webr
---

```{r}
#| echo: false
#| eval: true
#| warning: false

pacman::p_load(tibble, gt, dplyr, AlphaSimR, here, ggplot2, patchwork)
```

## Programa Simulped

El objetivo de este programa es simular genotipos utilizando la misma estructura genealógica que la población fundadora. Con Simulped, la información genómica disponible se emplea para crear una generación base. Luego, los genotipos de esta generación base se utilizan para generar varias generaciones discretas (no solapadas) de X individuos mediante "gene-dropping", con apareamiento aleatorio y sin distinción de sexo. Finalmente, los genotipos de la última generación simulada se emplean para generar los genotipos de los individuos fundadores presentes en el pedigrí. Este programa también permite la selección de individuos a través del pedigrí, generando un carácter indefinido (agregado).

A continuación, se puede descargar el archivo de parámetros del programa<!-- y su ejecutable-->:

<td>&#128046; <a href="Simulped/parameters.txt" class="export">Archivo de parámetros</a></td> <HD>

<!--<td>&#128046; <a href="Softwares/simulped.exe" class="export">Ejecutable</a></td> <br>-->

A modo de ejemplo, se puede observar el directorio de trabajo para la primera réplica generado por este programa:

![](Imagenes/dir_replica_1.png)

## Paquete de `R` AlphaSimR

El paquete `AlphaSimR` puede instalarse y usarse desde el `R` mediante:

```{r}
#| echo: true
#| eval: false
#| warning: false

install.packages('AlphaSimR')
library(AlphaSimR)
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Establecimiento de parámetros de simulación en la primera réplica.

###########
# Replica 1
###########

## 1. Se crea a continuación un objeto de clase SimParam denominado como "SP". Este contiene parámetros de simulación globales ----

founderPop <- readRDS(here(file = 'AlphaSimR/Dato/replica_1/founderPop.rds'))

#print(founderPop)

SP <- SimParam$new(founderPop)

## 2. Luego se importan los efectos de los QTLs y se asigna el sexo a los individuos ----

QTLsEffects <- read.table(here(file = 'AlphaSimR/Dato/replica_1/qtlmap.txt'))
colnames(QTLsEffects) <- c('id', 'chromosome', 'position', 'effect')
QTLsMap <- QTLsEffects[,c('id', 'effect')]
#dim_desc(x = QTLsEffects)

SP$importTrait(
  markerNames = QTLsEffects$id,
  addEff = QTLsEffects$effect,
  name = 'Agregado_PD'
  )

#SP$traits

SP$setSexes('yes_sys')

## 3. Una vez establecido los parámetros de simulación globales y definido el carácter, se simula (o crea) a continuación los individuos de la población base a partir de los haplotipos fundadores ----

basePop <- newPop(founderPop)
#print(basePop)
```

`AlphaSimR` utiliza datos de genotipo como entrada, representados en forma de alelos haplotípicos. Por lo tanto, las salidas del programa Simulped (específicamente, __haplotot_sim1.txt__ y __haplotot_sim2.txt__ anteriomente mostrados en la primera imagen) pueden ser utilizadas por este paquete.

::: {.callout-caution}
## Haplotipos en AlphaSimR

En el paquete `AlphaSimR`, el ADN se representa como una serie de ceros (0) y unos (1). En este esquema, 0 indica un alelo ancestral, mientras que 1 representa un alelo derivado, es decir, un alelo que surgió por mutación del alelo ancestral. Esta secuencia de alelos se denomina haplotipo. Un individuo diploide, por lo tanto, tendrá dos haplotipos por cada cromosoma:
:::

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Observación de haplotipos en la primera réplica.

###########
# Replica 1
###########

AH <- tibble(
  '1' = c(1, 1, 0, 0, 1, 1, 0, 0),
  '2' = c(0, 1, 0, 0, 0, 1, 0, 0),
  '3' = c(1, 1, 0, 1, 1, 1, 0, 1),
  '4' = c(0, 0, 1, 0, 0, 0, 1, 1),
  '5' = c(0, 0, 1, 0, 1, 0, 1, 0),
  '6' = c(0, 0, 0, 0, 0, 0, 0, 1),
  '7' = c(0, 0, 0, 0, 0, 0, 0, 0),
  '8' = c(1, 0, 0, 1, 0, 0, 0, 1)
  )
print(AH) # Se observan los haplotipos de cuatro individuos.
```

::: {.callout-caution}
## Genotipos en AlphaSimR

Luego, la suma de los dos alelos haplotípicos da lugar al genotipo en forma de dosificación alélica. La dosificación puede ser 0, 1 o 2, donde 0 significa que no se poseen alelos derivados, 1 indica la presencia de un alelo derivado y 2 indica que ambos alelos son derivados:
:::

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Observación de genotipos en la primera réplica.

###########
# Replica 1
###########

AH_grupos <- AH |>
  dplyr::mutate(Grupos = rep(1:(n()/2), each = 2))  # Se crear una columna de grupos de cada 2 filas.

AH_grupos |>
  group_by(Grupos) |>
  summarise(
    across(
      .cols = c(1:8),
      .fns = sum
    )
  ) |> # Se observan los genotipos de cuatro individuos.
  select(-Grupos)
```

`AlphaSimR` también utiliza el pedigrí, el mapa genético y los efectos de los QTLs. Una descripción detallada del proceso de importación de datos externos a AlphaSimR puede encontrarse [aquí](https://github.com/gaynorr/AlphaSimR_Examples/blob/master/misc/ASR_ImportExternalData.R). A continuación, se muestran los QTLs y sus efectos:

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Efectos de los QTLs.

DT::datatable(data = QTLsMap,
  options = list(
    searching = FALSE,    # Se elimina la barra de búsqueda.
    pageLength = 8,       # Se muestran 8 filas por página.
    lengthChange = FALSE  # Se elimina la opción para cambiar el número de filas mostradas.
    ),
  class = 'compact'       # Se hace la tabla más compacta
  )
```

Usando estos datos (haplotipos, pedigrí y mapa genético) `AlphaSimR` crea la población fundadora:

```{r}
#| echo: true
#| eval: false
#| warning: false
#| label: Creación de la población fundadora.

founderPop <- importHaplo(
  haplo = marHap,
  genMap = genMap,
  ped = ped,
  ploidy = 2
  )
```

Luego se crea un objeto de clase SimParam (SP) en el que se almacenarán (o definirán) los parámetros de simulación globales que se aplicarán a la población fundadora y a las generaciones sucesivas:

```{r}
#| echo: true
#| eval: false
#| warning: false
#| label: Creación del objeto de clase SimParam (SP).

SP <- SimParam$new(founderPop)
```

A continuación, se importa los efectos de los QTLs y se asocian al carácter (en este caso, el agregado generado a partir de la información del peso al destete simulado en el programa Simulped). También se realiza la asignación de sexos en la población:

```{r}
#| echo: true
#| eval: false
#| warning: false
#| label: Importación de efectos de QTLs y asignación de sexos

SP$importTrait(
  markerNames = QTLsEffects$id,
  addEff = QTLsEffects$effect,
  name = 'Agregado_PD'
  )

SP$setSexes('yes_sys')
```

::: {.callout-important}
## Importación de QTLs en AlphaSimR

Este paso es esencial porque le dice a `AlphaSimR` cómo calcular los valores genéticos para el carácter (Agregado_PD), tomando en cuenta la información sobre los QTLs y sus efectos.
:::

Finalmente, se simulan los individuos de la población base a partir de la población fundadora creada anteriormente:

```{r}
#| echo: true
#| eval: false
#| warning: false
#| label: Simulación de los individuos de la población base 1.

basePop <- newPop(founderPop)

str(basePop, max.level = 2)
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Simulación de los individuos de la población base 2.

str(basePop, max.level = 2)
```

::: {.callout-important}
## Simulación de los individuos de la población base en AlphaSimR

Como resultado se obtiene un objeto (basePop) de clase pop. Este objeto contiene la población base simulada. Los individuos de la población base recibirán genotipos a partir de los haplotipos fundadores, y respetando la estructura del pedigrí (es decir, manteniendo las relaciones de padres e hijos).
:::

#### a. Población base (o generación reciente)

A continuación, mediante un histograma, se puede visualizar la distribución de los valores genéticos aditivos en la población base.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Observación de los valores mejorantes de la población base.
#| fig.width: 6
#| fig.height: 6

ggplot(data = as_tibble(gv(basePop)), mapping = aes(x = Agregado_PD)) +
  geom_histogram(fill = 'orange', color = 'orange', alpha = 0.2) +
  labs(title = NULL, x = 'Valores mejorantes', y = 'Frecuencia') +
  theme_bw()
```

La varianza genética aditiva de la población base es igual a ```r round(varG(basePop), digits = 2)```.

En `AlphaSimR` se utiliza la función `setPheno()` para simular valores fenotípicos:

```{r}
#| echo: true
#| eval: true
#| warning: false
#| label: Observación de la valores fenotípicos de la población base 1.

basePop <- setPheno(
  basePop,
  h2 = 0.28
  )
```

A continuación se puede observar algunos de estos valores fenotípicos junto a su distribución:

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Observación de la valores fenotípicos de la población base 2.
#| fig.width: 6
#| fig.height: 6

tibble(
  ID = basePop@id,
  Fenotipos = pheno(basePop)[, 1]
  )

plot_basePop <- ggplot(data = as_tibble(pheno(basePop)), mapping = aes(x = Agregado_PD)) +
  geom_histogram(fill = 'orange', color = 'orange', alpha = 0.2) +
  labs(title = NULL, x = 'Valores fenotípicos', y = 'Frecuencia') +
  theme_bw()

print(plot_basePop)
```

::: {.callout-caution}
## Valores fenotípicos negativos en AlphaSimR

En `AlphaSimR`, los valores fenotípicos se calculan como la suma de dos componentes: los efectos aditivos de los QTLs y el efecto ambiental. A menos que se fije un intercepto (o valor medio del carácter), los valores fenotípicos simulados puedan incluir valores negativos si ambos efectos son lo suficientemente bajos. 
:::

La media de los valores fenotípicos en la población base y la varianza fenotípica son iguales a ```r round(meanP(basePop), digits = 2)``` y ```r round(varP(basePop), digits = 2)```, respectivamente.

#### b. Población mejorada (una sola generación)

A continuación, se seleccionan individuos (machos y hembras) en función de sus valores genéticos aditivos (gv):

```{r}
#| echo: true
#| eval: true
#| warning: false
#| label: Selección de individuos (machos y hembras) basada en valores genéticos estimados (GEBVs).

Sires <- selectInd(
  pop = basePop, nInd = 150,
  use = 'gv', sex = 'M', selectTop = TRUE
  )
Dams <- selectInd(
  pop = basePop, nInd = 3000,
  use = 'gv', sex = 'F', selectTop = TRUE
  )
```

Luego se cruzan dichos individuos para generar la primera generación (gen1) de descendientes:

```{r}
#| echo: true
#| eval: true
#| warning: false
#| label: Cruce de individuos seleccionados.

gen1 <- randCross2(
  males = Sires, 
  females = Dams,
  nCrosses = 3000, 
  nProgeny = 1
  )
```

La varianza genética aditiva de la población mejorada es igual a ```r round(varG(gen1), digits = 2)```.

Y los valores fenotípicos junto y su distribución (comparada con la población base) son:

```{r}
#| echo: true
#| eval: true
#| warning: false
#| label: Observación de la valores fenotípicos de la población mejorada 1.

gen1 <- setPheno(
  gen1,
  h2 = 0.28
  )
```

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Observación de la valores fenotípicos de la población mejorada 2.
#| fig.width: 6
#| fig.height: 6

tibble(
  ID = gen1@id,
  Fenotipos = pheno(gen1)[, 1]
  )

plot_gen1 <- ggplot(data = as_tibble(pheno(gen1)), mapping = aes(x = Agregado_PD)) +
  geom_histogram(fill = 'green', color = 'green', alpha = 0.2) +
  labs(title = 'Población mejorada', x = 'Valores fenotípicos', y = 'Frecuencia') +
  xlim(range(pheno(basePop))) +
  theme_bw()

plot_basePop <- ggplot(data = as_tibble(pheno(basePop)), mapping = aes(x = Agregado_PD)) +
  geom_histogram(fill = 'orange', color = 'orange', alpha = 0.2) +
  labs(title = 'Población base', x = 'Valores fenotípicos', y = 'Frecuencia') +
  theme_bw()

(plot_basePop) / (plot_gen1)
```

La media de los valores fenotípicos en la población mejorada y la varianza fenotípica son iguales a ```r round(meanP(gen1), digits = 2)``` y ```r round(varP(gen1), digits = 2)```, respectivamente.

#### c. Parámetros de comparación en ambas poblaciones

A continuación, se puede observar algunos parámetros genéticos en las diez réplicas simuladas.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| label: Parámetros en población base y mejorada.

tibble(
  `Parámetro|Réplica` = c('μₚ', 'σ²ₐ', 'σ²ₚ', 'F', 'μₚ', 'σ²ₐ', 'σ²ₚ', 'F', 'ΔG', 'Precisión'),
  `Réplica 1` = c(-21.23, 324.83, 1157.24, -0.02, 22.41, 175.50, 1042.84, 0.001, 44.27, 0.42),
  `Réplica 2` = c(21.46, 368.89, 1325.58, -0.02, 69.02, 159.97, 1129.03, 0.001, 47.15, 0.41),
  `Réplica 3` = c(-6.87, 349.98, 1260.77, -0.02, 40.19, 183.42, 1093.02, 0.001, 47.33, 0.41),
  `Réplica 4` = c(-35.26, 463.50, 1644.34, -0.02, 18.06, 221.36, 1457.38, 0.0003, 54.42, 0.40),
  `Réplica 5` = c(23.80, 417.07, 1478.78, -0.02, 72.48, 221.50, 1317.98, 0.001, 50.16, 0.43),
  `Réplica 6` = c(22.38, 465.94, 1672.25, -0.02, 75.72, 226.46, 1456.74, 0.001, 53.77, 0.40),
  `Réplica 7` = c(-8.23, 534.73, 1910.08, -0.02, 47.55, 275.29, 1640.63, 0.001, 55.87, 0.38),
  `Réplica 8` = c(-24.75, 290.86, 1035.77, -0.02, 20.02, 171.85, 902.35, 0.001, 43.64, 0.43),
  `Réplica 9` = c(-10.17, 316.38, 1125.35, -0.02, 34.05, 172.43, 1007.28, 0.001, 44.53, 0.42),
  `Réplica 10` = c(-19.43, 392.42, 1411.05, -0.02, 29.33, 200.64, 1184.29, 0.001, 48.16, 0.42)
  ) |>
  gt(rowname_col = 'Parámetro|Réplica') |>
  opt_table_lines() |>
  tab_row_group(
    label = 'Población mejorada',
    rows = c(5:10)
    ) |>
  tab_row_group(
    label = 'Población base',
    rows = c(1:4)
    ) |>
  tab_footnote(
    footnote = 'Se calculó el progreso genético como la diferencia en la media de los valores genéticos entre la población base y la mejorada.',
    locations = cells_stub(rows = 'ΔG')) |>
  tab_footnote(
    footnote = 'Se calculó la precisión como la correlación entre los valores genéticos y los valores fenotípicos.',
    locations = cells_stub(rows = 'Precisión')) |>
  tab_footnote(
    footnote = 'Se calculó el coeficiente de consanguinidad basado en el genoma, que compara la cantidad de homocigosis observada en el genoma con lo esperado.',
    locations = cells_stub(rows = 'F'))
```

::: {.callout-warning collapse="true"}
## Cálculo del coeficiente de consanguinidad basado en el genoma

El coeficiente de consanguinidad basado en el genoma se calculó a partir de los siguiente paso:

+ Paso 1. Extracción de los genotipos

Los genotipos pueden extraerse a partir de `basePopGeno <- pullSegSiteGeno(basePop)`.

+ Paso 2. Cálculo de la frecuencia alélica en cada locus

El objetivo consiste en obtener la frecuencia del alelo derivado en cada locus dividiendo la media de los genotipos entre 2:

$$f = \frac{\sum_{i=1}^{n} g_{i}}{2n}$$

donde $f$ es la frecuencia del alelo derivado, $g_{i}$ es el valor del genotipo para el marcador $i$ (0, 1, o 2) y $n$ es el número de individuos.

+ Paso 3. Cálculo de la homocigosis esperada por locus

El objetivo consiste en determinar la probabilidad de que ambos alelos en un locus sean iguales (homocigóticos):

$$H_{esp} = f^{2} + (1 - f)^{2}$$

donde $H_{esp}$ es la homocigosis esperada para un locus y $f$ es la frecuencia alélica.

+ Paso 4. Cálculo de la homocigosis observada por individuo

Aquí se cuenta cuántos loci son homocigotos (genotipo 0 o 2) para cada individuo.

+ Paso 5. Cálculo del coeficiente de consanguinidad

Este parámetro mide el exceso de homocigosis en relación con lo esperado por azar. Si $F > 0$, el individuo es más consanguíneo de lo esperado; si $F < 0$, hay menos homocigosis de lo esperado. La formula es:

$$F = 1 - \frac{H_{obs}}{H_{esp}}$$

donde $F$ es el coeficiente de consanguinidad, $H_{obs}$ es la homocigosis observada por individuo y $H_{esp}$ es la homocigosis esperada por locus.

Luego se calcula la consanguinidad promedio de la población como la media de los coeficientes individuales.
:::

<!--
```{webr-r}

```
-->
