[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Demostraci√≥n de la simulaci√≥n",
    "section": "",
    "text": "El objetivo de este programa es simular genotipos utilizando la misma estructura geneal√≥gica que la poblaci√≥n fundadora. Con Simulped, la informaci√≥n gen√≥mica disponible se emplea para crear una generaci√≥n base. Luego, los genotipos de esta generaci√≥n base se utilizan para generar varias generaciones discretas (no solapadas) de X individuos mediante ‚Äúgene-dropping‚Äù, con apareamiento aleatorio y sin distinci√≥n de sexo. Finalmente, los genotipos de la √∫ltima generaci√≥n simulada se emplean para generar los genotipos de los individuos fundadores presentes en el pedigr√≠. Este programa tambi√©n permite la selecci√≥n de individuos a trav√©s del pedigr√≠, generando un car√°cter indefinido (agregado).\nA continuaci√≥n, se puede descargar el archivo de par√°metros del programa:\n\nüêÆ Archivo de par√°metros\n\n\n\nA modo de ejemplo, se puede observar el directorio de trabajo para la primera r√©plica generado por este programa:"
  },
  {
    "objectID": "index.html#programa-simulped",
    "href": "index.html#programa-simulped",
    "title": "Demostraci√≥n de la simulaci√≥n",
    "section": "",
    "text": "El objetivo de este programa es simular genotipos utilizando la misma estructura geneal√≥gica que la poblaci√≥n fundadora. Con Simulped, la informaci√≥n gen√≥mica disponible se emplea para crear una generaci√≥n base. Luego, los genotipos de esta generaci√≥n base se utilizan para generar varias generaciones discretas (no solapadas) de X individuos mediante ‚Äúgene-dropping‚Äù, con apareamiento aleatorio y sin distinci√≥n de sexo. Finalmente, los genotipos de la √∫ltima generaci√≥n simulada se emplean para generar los genotipos de los individuos fundadores presentes en el pedigr√≠. Este programa tambi√©n permite la selecci√≥n de individuos a trav√©s del pedigr√≠, generando un car√°cter indefinido (agregado).\nA continuaci√≥n, se puede descargar el archivo de par√°metros del programa:\n\nüêÆ Archivo de par√°metros\n\n\n\nA modo de ejemplo, se puede observar el directorio de trabajo para la primera r√©plica generado por este programa:"
  },
  {
    "objectID": "index.html#paquete-de-r-alphasimr",
    "href": "index.html#paquete-de-r-alphasimr",
    "title": "Demostraci√≥n de la simulaci√≥n",
    "section": "Paquete de R AlphaSimR",
    "text": "Paquete de R AlphaSimR\nEl paquete AlphaSimR puede instalarse y usarse desde el R mediante:\n\ninstall.packages('AlphaSimR')\nlibrary(AlphaSimR)\n\nAlphaSimR utiliza datos de genotipo como entrada, representados en forma de alelos haplot√≠picos. Por lo tanto, las salidas del programa Simulped (espec√≠ficamente, haplotot_sim1.txt y haplotot_sim2.txt anteriomente mostrados en la primera imagen) pueden ser utilizadas por este paquete.\n\n\n\n\n\n\nHaplotipos en AlphaSimR\n\n\n\nEn el paquete AlphaSimR, el ADN se representa como una serie de ceros (0) y unos (1). En este esquema, 0 indica un alelo ancestral, mientras que 1 representa un alelo derivado, es decir, un alelo que surgi√≥ por mutaci√≥n del alelo ancestral. Esta secuencia de alelos se denomina haplotipo. Un individuo diploide, por lo tanto, tendr√° dos haplotipos por cada cromosoma:\n\n\n\n\n# A tibble: 8 √ó 8\n    `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     0     1     0     0     0     0     1\n2     1     1     1     0     0     0     0     0\n3     0     0     0     1     1     0     0     0\n4     0     0     1     0     0     0     0     1\n5     1     0     1     0     1     0     0     0\n6     1     1     1     0     0     0     0     0\n7     0     0     0     1     1     0     0     0\n8     0     0     1     1     0     1     0     1\n\n\n\n\n\n\n\n\nGenotipos en AlphaSimR\n\n\n\nLuego, la suma de los dos alelos haplot√≠picos da lugar al genotipo en forma de dosificaci√≥n al√©lica. La dosificaci√≥n puede ser 0, 1 o 2, donde 0 significa que no se poseen alelos derivados, 1 indica la presencia de un alelo derivado y 2 indica que ambos alelos son derivados:\n\n\n\n\n# A tibble: 4 √ó 8\n    `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     2     1     2     0     0     0     0     1\n2     0     0     1     1     1     0     0     1\n3     2     1     2     0     1     0     0     0\n4     0     0     1     2     1     1     0     1\n\n\nAlphaSimR tambi√©n utiliza el pedigr√≠, el mapa gen√©tico y los efectos de los QTLs. Una descripci√≥n detallada del proceso de importaci√≥n de datos externos a AlphaSimR puede encontrarse aqu√≠. A continuaci√≥n, se muestran los QTLs y sus efectos:\n\n\n\n\n\n\nUsando estos datos (haplotipos, pedigr√≠ y mapa gen√©tico) AlphaSimR crea la poblaci√≥n fundadora:\n\nfounderPop &lt;- importHaplo(\n  haplo = marHap,\n  genMap = genMap,\n  ped = ped,\n  ploidy = 2\n  )\n\nLuego se crea un objeto de clase SimParam (SP) en el que se almacenar√°n (o definir√°n) los par√°metros de simulaci√≥n globales que se aplicar√°n a la poblaci√≥n fundadora y a las generaciones sucesivas:\n\nSP &lt;- SimParam$new(founderPop)\n\nA continuaci√≥n, se importa los efectos de los QTLs y se asocian al car√°cter (en este caso, el agregado generado a partir de la informaci√≥n del peso al destete simulado en el programa Simulped):\n\nSP$importTrait(\n  markerNames = QTLsEffects$id,\n  addEff = QTLsEffects$effect,\n  name = 'Agregado_PD'\n  )\n\n\n\n\n\n\n\nImportaci√≥n de QTLs en AlphaSimR\n\n\n\nEste paso es escencial porque le dice a AlphaSimR c√≥mo calcular los valores gen√©ticos para el car√°cter (Agregado_PD), tomando en cuenta la informaci√≥n sobre los QTLs y sus efectos.\n\n\nFinalmente, se simulan los individuos de la poblaci√≥n base a partir de la poblaci√≥n fundadora creada anteriormente:\n\nbasePop &lt;- newPop(founderPop)\n\nstr(basePop, max.level = 2)\n\n\n\nFormal class 'Pop' [package \"AlphaSimR\"] with 18 slots\n  ..@ id     : chr [1:92177] \"1\" \"2\" \"3\" \"4\" ...\n  ..@ iid    : int [1:92177] 1 2 3 4 5 6 7 8 9 10 ...\n  ..@ mother : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ father : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ sex    : chr [1:92177] \"H\" \"H\" \"H\" \"H\" ...\n  ..@ nTraits: int 1\n  ..@ gv     : num [1:92177, 1] -12.98 -19.17 -32.82 -28.33 8.04 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ pheno  : num [1:92177, 1] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ ebv    : num[1:92177, 0 ] \n  ..@ gxe    :List of 1\n  ..@ fixEff : int [1:92177] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ misc   :List of 92177\n  ..@ miscPop: list()\n  ..@ nInd   : int 92177\n  ..@ nChr   : int 29\n  ..@ ploidy : int 2\n  ..@ nLoci  : int [1:29] 2923 2303 2062 2116 1775 2065 1867 1912 1715 1762 ...\n  ..@ geno   :List of 29\n\n\n\n\n\n\n\n\nSimulaci√≥n de los individuos de la poblaci√≥n base en AlphaSimR\n\n\n\nComo resultado se obtiene un objeto (basePop) de clase pop. Este objeto contiene la poblaci√≥n base simulada. Los individuos de la poblaci√≥n base recibir√°n genotipos a partir de los haplotipos fundadores, y respetando la estructura del pedigr√≠ (es decir, manteniendo las relaciones de padres e hijos).\n\n\n\na. Poblaci√≥n base (o generaci√≥n reciente)\nA continuaci√≥n, mediante un histograma, se puede visualizar la distribuci√≥n de los valores gen√©ticos verdaderos (TBVs) en la poblaci√≥n base:\n\n\n\n\n\n\n\n\n\nLa varianza gen√©tica aditiva de la poblaci√≥n base es igual a 324.83.\nUna de las salidas dadas por el programa Simulped son los datos (denominado como datos_sim.txt). Este archivo contiene como variables la edad del individuo, su sexo, la edad de la madre, el grupo de comparaci√≥n, la identificaci√≥n del individuo y el fenotipo (el agregado). A continuaci√≥n, se asignan las variables sexo y fenotipo a los slot @sex y @pheno, respectivamente. Luego, el resto de variables se asignan al slot @misc que puede usarse para almacenar informaci√≥n adicional.\nPrimero se realiza la asignaci√≥n de sexos en la poblaci√≥n base:\n\n\nFormal class 'Pop' [package \"AlphaSimR\"] with 18 slots\n  ..@ id     : chr [1:92177] \"1\" \"2\" \"3\" \"4\" ...\n  ..@ iid    : int [1:92177] 1 2 3 4 5 6 7 8 9 10 ...\n  ..@ mother : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ father : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ sex    : chr [1:92177] \"H\" \"H\" \"H\" \"H\" ...\n  ..@ nTraits: int 1\n  ..@ gv     : num [1:92177, 1] -12.98 -19.17 -32.82 -28.33 8.04 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ pheno  : num [1:92177, 1] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ ebv    : num[1:92177, 0 ] \n  ..@ gxe    :List of 1\n  ..@ fixEff : int [1:92177] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ misc   :List of 92177\n  ..@ miscPop: list()\n  ..@ nInd   : int 92177\n  ..@ nChr   : int 29\n  ..@ ploidy : int 2\n  ..@ nLoci  : int [1:29] 2923 2303 2062 2116 1775 2065 1867 1912 1715 1762 ...\n  ..@ geno   :List of 29\n\n\nSe verifica la asignaci√≥n correcta de sexos comprobando que los individuos 970 y 978 corresponden a machos:\n\n\n [1] \"H\" \"H\" \"M\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"H\" \"M\"\n\n\nLuego se realiza la asignaci√≥n de fenotipos en la poblaci√≥n base:\n\n\nFormal class 'Pop' [package \"AlphaSimR\"] with 18 slots\n  ..@ id     : chr [1:92177] \"1\" \"2\" \"3\" \"4\" ...\n  ..@ iid    : int [1:92177] 1 2 3 4 5 6 7 8 9 10 ...\n  ..@ mother : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ father : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ sex    : chr [1:92177] \"H\" \"H\" \"H\" \"H\" ...\n  ..@ nTraits: int 1\n  ..@ gv     : num [1:92177, 1] -12.98 -19.17 -32.82 -28.33 8.04 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ pheno  : num [1:92177, 1] NA NA NA NA NA NA NA NA NA NA ...\n  ..@ ebv    : num[1:92177, 0 ] \n  ..@ gxe    :List of 1\n  ..@ fixEff : int [1:92177] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ misc   :List of 92177\n  ..@ miscPop: list()\n  ..@ nInd   : int 92177\n  ..@ nChr   : int 29\n  ..@ ploidy : int 2\n  ..@ nLoci  : int [1:29] 2923 2303 2062 2116 1775 2065 1867 1912 1715 1762 ...\n  ..@ geno   :List of 29\n\n\nSe verifica la asignaci√≥n correcta de fenotipos comprobando que los individuos 5313 y 5314 tienen esta informaci√≥n, mientras que los individuos anteriores a ellos no:\n\n\n[1]       NA       NA 994.2212 949.7331\n\n\nPor √∫ltimo, se realiza la asignaci√≥n del resto de variables en la poblaci√≥n base:\n\n\nFormal class 'Pop' [package \"AlphaSimR\"] with 18 slots\n  ..@ id     : chr [1:92177] \"1\" \"2\" \"3\" \"4\" ...\n  ..@ iid    : int [1:92177] 1 2 3 4 5 6 7 8 9 10 ...\n  ..@ mother : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ father : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ sex    : chr [1:92177] \"H\" \"H\" \"H\" \"H\" ...\n  ..@ nTraits: int 1\n  ..@ gv     : num [1:92177, 1] -12.98 -19.17 -32.82 -28.33 8.04 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ pheno  : num [1:92177, 1] NA NA NA NA NA NA NA NA NA NA ...\n  ..@ ebv    : num[1:92177, 0 ] \n  ..@ gxe    :List of 1\n  ..@ fixEff : int [1:92177] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ misc   :List of 92177\n  ..@ miscPop: list()\n  ..@ nInd   : int 92177\n  ..@ nChr   : int 29\n  ..@ ploidy : int 2\n  ..@ nLoci  : int [1:29] 2923 2303 2062 2116 1775 2065 1867 1912 1715 1762 ...\n  ..@ geno   :List of 29\n\n\nSe verifica la asignaci√≥n correcta de variables (efectos fijos y covariable) en los individuos 5313 y 5314:\n\n\nList of 4\n $ :List of 3\n  ..$ edad_individuo   : num NA\n  ..$ edad_madre       : num NA\n  ..$ grupo_comparacion: num NA\n $ :List of 3\n  ..$ edad_individuo   : num NA\n  ..$ edad_madre       : num NA\n  ..$ grupo_comparacion: num NA\n $ :List of 3\n  ..$ edad_individuo   : num 234\n  ..$ edad_madre       : num 1\n  ..$ grupo_comparacion: num 256\n $ :List of 3\n  ..$ edad_individuo   : num 209\n  ..$ edad_madre       : num 1\n  ..$ grupo_comparacion: num 258\n\n\nA continuaci√≥n se puede observar algunos de los valores fenot√≠picos junto a su distribuci√≥n:\n\n\n# A tibble: 10 √ó 2\n   ID    Fenotipos\n   &lt;chr&gt;     &lt;dbl&gt;\n 1 5309        NA \n 2 5310        NA \n 3 5311        NA \n 4 5312        NA \n 5 5313       994.\n 6 5314       950.\n 7 5315       962.\n 8 5316       995.\n 9 5317      1028.\n10 5318       955.\n\n\n\n\n\n\n\n\n\nLa media de los valores fenot√≠picos en la poblaci√≥n base y la varianza fenot√≠pica son iguales a 1008.32 y 1632.71, respectivamente.\n\n\nb. Poblaci√≥n mejorada (una sola generaci√≥n)\nA continuaci√≥n, se seleccionan individuos (machos y hembras) en funci√≥n de sus TBVs:\n\nSires &lt;- selectInd(\n  pop = basePop, nInd = 150,\n  use = 'gv', sex = 'M', selectTop = TRUE\n  )\nDams &lt;- selectInd(\n  pop = basePop, nInd = 3000,\n  use = 'gv', sex = 'F', selectTop = TRUE\n  )\n\nLuego se cruzan dichos individuos para generar la primera generaci√≥n (gen1) de descendientes:\n\ngen1 &lt;- randCross2(\n  males = Sires, \n  females = Dams,\n  nCrosses = 3000, \n  nProgeny = 1\n  )\n\nLa varianza gen√©tica aditiva de la poblaci√≥n mejorada es igual a 169.7.\nEn AlphaSimR se utiliza la funci√≥n setPheno() para simular valores fenot√≠picos:\n\ngen1 &lt;- setPheno(\n  gen1,\n  h2 = 0.28\n  )\n\ngen1@pheno &lt;- gen1@pheno + 1000 # Se suma un valor de 1000 (media o intercepto) a todos los fenotipos despu√©s de haberlos simulado.\n\n\n\n\n\n\n\nValores fenot√≠picos en AlphaSimR\n\n\n\nEn AlphaSimR, los valores fenot√≠picos se calculan como la suma de dos componentes: los efectos aditivos de los QTLs y el efecto ambiental. A menos que se fije un intercepto (o valor medio del car√°cter), los valores fenot√≠picos simulados puedan incluir valores negativos si ambos efectos son lo suficientemente bajos.\n\n\nLos valores fenot√≠picos de la poblaci√≥n mejorada junto a su distribuci√≥n (comparada con la poblaci√≥n base) son:\n\n\n# A tibble: 3,000 √ó 2\n   ID    Fenotipos\n   &lt;chr&gt;     &lt;dbl&gt;\n 1 92178     1041.\n 2 92179     1038.\n 3 92180     1060.\n 4 92181     1035.\n 5 92182     1011.\n 6 92183     1067.\n 7 92184     1046.\n 8 92185     1010.\n 9 92186     1035.\n10 92187     1001.\n# ‚Ñπ 2,990 more rows\n\n\n\n\n\n\n\n\n\nLa media de los valores fenot√≠picos en la poblaci√≥n mejorada y la varianza fenot√≠pica son iguales a 1029.37 y 1053.38, respectivamente.\n\n\nc.¬†Par√°metros de comparaci√≥n en ambas poblaciones\nA continuaci√≥n, se puede observar algunos par√°metros gen√©ticos en las diez r√©plicas simuladas.\n\n\n\n\n\n\n\n\n\nR√©plica 1\n\n\n\n\nPoblaci√≥n base\n\n\nŒº‚Çö\n1008.320\n\n\nœÉ¬≤‚Çê\n324.830\n\n\nœÉ¬≤‚Çö\n1632.710\n\n\nF1\n-0.020\n\n\nPoblaci√≥n mejorada\n\n\nŒº‚Çö\n1027.600\n\n\nœÉ¬≤‚Çê\n177.270\n\n\nœÉ¬≤‚Çö\n1013.520\n\n\nF\n0.001\n\n\nŒîG2\n48.530\n\n\nPrecisi√≥n3\n0.430\n\n\n\n1 Se calcul√≥ el coeficiente de consanguinidad basado en el genoma, que compara la cantidad de homocigosis observada en el genoma con lo esperado.\n\n\n2 Se calcul√≥ el progreso gen√©tico como la diferencia en la media de los valores gen√©ticos entre la poblaci√≥n base y la mejorada.\n\n\n3 Se calcul√≥ la precisi√≥n como la correlaci√≥n entre los valores gen√©ticos y los valores fenot√≠picos.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC√°lculo del coeficiente de consanguinidad basado en el genoma\n\n\n\n\n\nEl coeficiente de consanguinidad basado en el genoma se calcul√≥ a partir de los siguiente paso:\n\nPaso 1. Extracci√≥n de los genotipos\n\nLos genotipos pueden extraerse a partir de basePopGeno &lt;- pullSegSiteGeno(basePop).\n\nPaso 2. C√°lculo de la frecuencia al√©lica en cada locus\n\nEl objetivo consiste en obtener la frecuencia del alelo derivado en cada locus dividiendo la media de los genotipos entre 2:\n\\[f = \\frac{\\sum_{i=1}^{n} g_{i}}{2n}\\]\ndonde \\(f\\) es la frecuencia del alelo derivado, \\(g_{i}\\) es el valor del genotipo para el marcador \\(i\\) (0, 1, o 2) y \\(n\\) es el n√∫mero de individuos.\n\nPaso 3. C√°lculo de la homocigosis esperada por locus\n\nEl objetivo consiste en determinar la probabilidad de que ambos alelos en un locus sean iguales (homocig√≥ticos):\n\\[H_{esp} = f^{2} + (1 - f)^{2}\\]\ndonde \\(H_{esp}\\) es la homocigosis esperada para un locus y \\(f\\) es la frecuencia al√©lica.\n\nPaso 4. C√°lculo de la homocigosis observada por individuo\n\nAqu√≠ se cuenta cu√°ntos loci son homocigotos (genotipo 0 o 2) para cada individuo.\n\nPaso 5. C√°lculo del coeficiente de consanguinidad\n\nEste par√°metro mide el exceso de homocigosis en relaci√≥n con lo esperado por azar. Si \\(F &gt; 0\\), el individuo es m√°s consangu√≠neo de lo esperado; si \\(F &lt; 0\\), hay menos homocigosis de lo esperado. La formula es:\n\\[F = 1 - \\frac{H_{obs}}{H_{esp}}\\]\ndonde \\(F\\) es el coeficiente de consanguinidad, \\(H_{obs}\\) es la homocigosis observada por individuo y \\(H_{esp}\\) es la homocigosis esperada por locus.\nLuego se calcula la consanguinidad promedio de la poblaci√≥n como la media de los coeficientes individuales."
  },
  {
    "objectID": "index.html#paquete-de-r-alphasimr-y-programa-blupf90",
    "href": "index.html#paquete-de-r-alphasimr-y-programa-blupf90",
    "title": "Demostraci√≥n de la simulaci√≥n",
    "section": "Paquete de R AlphaSimR y programa BLUPF90",
    "text": "Paquete de R AlphaSimR y programa BLUPF90\nAl usar str(basePop, max.level = 2), como se hizo anteriormente, se observa que el slot @ebv en el objeto de clase Pop est√° vac√≠o. Este est√° destinado para almacenar los valores gen√©ticos estimados (EBVs) de los individuos en una poblaci√≥n. Una vez calculados los EBVs de forma tradicional mediante BLUPF90, se obtienen a continuaci√≥n estas estimaciones:\n\nebv_blup &lt;- read_table(here(file = 'AlphaSimR', 'Dato', 'replica_1', 'solutions'), col_names = FALSE, skip = 1) |&gt;\n1  filter(X2 == 5)\n\n\n1\n\nSe deja los valores de fila que corresponde a los EBVs obtenidos de forma tradicional mediante BLUPF90.\n\n\n\n\nA continuaci√≥n, y en este orden, se garantiza que las IDs de los individuos en el objeto ebv_blup est√©n en el mismo orden que las IDs en basePop y se ordenan los EBVs en base al orden de IDs de basePop. Luego, se asignan los EBVs al slot @ebv de la poblaci√≥n base en AlphaSimR:\n\nebv_orden &lt;- match(basePop@id, ebv_blup$id)\n\nebv_orden_2 &lt;- ebv_blup$ebv[ebv_orden]\n\nbasePop@ebv &lt;- matrix(ebv_orden_2, ncol = 1)\n\nA continuaci√≥n, se verifica la asignaci√≥n de los EBVs:\n\nstr(basePop, max.level = 2)\n\nFormal class 'Pop' [package \"AlphaSimR\"] with 18 slots\n  ..@ id     : chr [1:92177] \"1\" \"2\" \"3\" \"4\" ...\n  ..@ iid    : int [1:92177] 1 2 3 4 5 6 7 8 9 10 ...\n  ..@ mother : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ father : chr [1:92177] \"0\" \"0\" \"0\" \"0\" ...\n  ..@ sex    : chr [1:92177] \"H\" \"H\" \"H\" \"H\" ...\n  ..@ nTraits: int 1\n  ..@ gv     : num [1:92177, 1] -12.98 -19.17 -32.82 -28.33 8.04 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ pheno  : num [1:92177, 1] NA NA NA NA NA NA NA NA NA NA ...\n  ..@ ebv    : num [1:92177, 1] 11.875 16.106 10.872 0.408 10.082 ...\n  ..@ gxe    :List of 1\n  ..@ fixEff : int [1:92177] 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ misc   :List of 92177\n  ..@ miscPop: list()\n  ..@ nInd   : int 92177\n  ..@ nChr   : int 29\n  ..@ ploidy : int 2\n  ..@ nLoci  : int [1:29] 2923 2303 2062 2116 1775 2065 1867 1912 1715 1762 ...\n  ..@ geno   :List of 29\n\n\n\na. Poblaci√≥n base (o generaci√≥n reciente)\nA continuaci√≥n, mediante un histograma, se puede visualizar la distribuci√≥n de los EBVs en la poblaci√≥n base.\n\n\n\n\n\n\n\n\n\nLa varianza gen√©tica aditiva de la poblaci√≥n base es igual a 49.3. La media de los valores fenot√≠picos y la varianza fenot√≠pica siguen siendo la misma a la presentada anteriormente, esto es, 1008.32 y 1632.71, respectivamente.\n\n\nb. Poblaci√≥n mejorada (una sola generaci√≥n)\nA continuaci√≥n, se seleccionan individuos (machos y hembras) en funci√≥n de sus EBVs:\n\nSires_blup &lt;- selectInd(\n  pop = basePop, nInd = 150,\n  use = 'ebv', sex = 'M', selectTop = TRUE\n  )\nDams_blup &lt;- selectInd(\n  pop = basePop, nInd = 3000,\n  use = 'ebv', sex = 'F', selectTop = TRUE\n  )\n\nLuego se cruzan dichos individuos para generar la primera generaci√≥n (gen1_blup) de descendientes:\n\ngen1_blup &lt;- randCross2(\n  males = Sires_blup, \n  females = Dams_blup,\n  nCrosses = 3000, \n  nProgeny = 1\n  )\n\nA continuaci√≥n, se utiliza la funci√≥n setPheno() de AlphaSimR para simular los valores fenot√≠picos:\n\ngen1_blup &lt;- setPheno(\n  gen1_blup,\n  h2 = 0.28\n  )\n\ngen1_blup@pheno &lt;- gen1_blup@pheno + 1000\n\nA continuaci√≥n se presentan los valores fenot√≠picos de la poblaci√≥n mejorada junto a su distribuci√≥n (comparada con la poblaci√≥n base):\n\n\n# A tibble: 3,000 √ó 2\n   ID    Fenotipos\n   &lt;chr&gt;     &lt;dbl&gt;\n 1 95178      947.\n 2 95179      973.\n 3 95180      906.\n 4 95181     1004.\n 5 95182      955.\n 6 95183     1007.\n 7 95184      921.\n 8 95185      941.\n 9 95186      994.\n10 95187      919.\n# ‚Ñπ 2,990 more rows\n\n\n\n\n\n\n\n\n\nLa media de los valores fenot√≠picos en la poblaci√≥n mejorada y la varianza fenot√≠pica son iguales a 978.38 y 1176.8, respectivamente.\n\n\nc.¬†Par√°metros de comparaci√≥n en ambas poblaciones\nA continuaci√≥n, se puede observar algunos par√°metros gen√©ticos en las diez r√©plicas simuladas.\n\n\n\n\n\n\n\n\n\nR√©plica 1\n\n\n\n\nPoblaci√≥n base\n\n\nŒº‚Çö\nNA\n\n\nœÉ¬≤‚Çê\nNA\n\n\nœÉ¬≤‚Çö\nNA\n\n\nF1\nNA\n\n\nPoblaci√≥n mejorada\n\n\nŒº‚Çö\nNA\n\n\nœÉ¬≤‚Çê\nNA\n\n\nœÉ¬≤‚Çö\nNA\n\n\nF\nNA\n\n\nŒîG2\nNA\n\n\nPrecisi√≥n3\nNA\n\n\n\n1 Se calcul√≥ el coeficiente de consanguinidad basado en el genoma, que compara la cantidad de homocigosis observada en el genoma con lo esperado.\n\n\n2 Se calcul√≥ el progreso gen√©tico como la diferencia en la media de los valores gen√©ticos entre la poblaci√≥n base y la mejorada.\n\n\n3 Se calcul√≥ la precisi√≥n como la correlaci√≥n entre los valores gen√©ticos y los valores fenot√≠picos."
  }
]